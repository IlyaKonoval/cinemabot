import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import api_file
from database import DataBaseHandler
from keyboard.main_keyboard import main_keyboard
from keyboard.deck_keyboard import deck_keyboard

BOT_TOKEN = api_file.BOT_TOKEN
KINOPOISK_API_KEY = api_file.KINOPOISK_API_KEY
GOOGLE_CX_KEY = api_file.GOOGLE_CX_KEY
GOOGLE_API_KEY = api_file.GOOGLE_API_KEY

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
DATABASE = DataBaseHandler(api_file.DATABASE_NAME)


def correct_film_title(title: str) -> str:
    corrections = {
        "–∫–∞–∫ –≤–∏—Ç—å–∫–∞ —á–µ—Å–Ω–æ–∫ –≤–µ–∑ –ª–µ—Ö—É —à—Ç—ã—Ä—è –≤ –¥–æ–º –∏–Ω–≤–∞–ª–∏–¥–æ–≤": "–ö–∞–∫ –í–∏—Ç—å–∫–∞ –ß–µ—Å–Ω–æ–∫ –≤—ë–∑ –õ—ë—Ö—É –®—Ç—ã—Ä—è –≤ –¥–æ–º –∏–Ω–≤–∞–ª–∏–¥–æ–≤"
    }
    return corrections.get(title.lower().strip(), title)


@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=main_keyboard()
    )


@dp.message(Command(commands=["help"]))
async def bot_help(message: Message):
    await message.reply('''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
''')


@dp.message(Command(commands=["stats"]))
async def user_stat(message: Message):
    stats = await DATABASE.user_stats(message.from_user.username)
    if stats:
        pairs = '\n'.join(f'{title}: {count}' for title, count in stats)
        await message.reply(pairs)
    else:
        await message.reply('No stats yet, make some requests please.')


@dp.message(Command(commands=["history"]))
async def user_search_history(message: Message):
    history_list = await DATABASE.user_search_history(message.from_user.username)
    if history_list:
        history_str = '\n'.join(title[0] for title in history_list)
        await message.reply(history_str)
    else:
        await message.reply('No history yet.')


async def get_film_info(title: str, session: aiohttp.ClientSession):
    corrected_title = correct_film_title(title)
    search_field = "alternativeName" if corrected_title.isascii() else "name"
    url = f'https://api.kinopoisk.dev/v1.3/movie?{search_field}={corrected_title}&limit=5'
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    async with session.get(url, headers=headers) as response:
        if response.status == 200:
            result = await response.json()
            if result.get("docs"):
                film = result["docs"][0]
                return {
                    "title": film.get("name"),
                    "rating": film.get("rating", {}).get("kp", "N/A"),
                    "poster": film.get("poster", {}).get("url", "N/A")
                }
        logging.error(f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {title}")
        return None


async def get_watch_links(title: str, session: aiohttp.ClientSession):
    params = {
        'q': f'{title} —Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω',
        'cx': GOOGLE_CX_KEY,
        'key': GOOGLE_API_KEY,
        'num': '2',
        'lr': 'lang_ru'
    }
    url = 'https://www.googleapis.com/customsearch/v1'
    async with session.get(url, params=params) as response:
        if response.status == 200:
            data = await response.json()
            items = data.get('items', [])
            links = [item['link'] for item in items[:2]]
            return links if links else None
        return None


@dp.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip()
    if text.lower() == "–≥–≤–∏–Ω—Ç":
        await message.reply("–ì–≤–∏–Ω—Ç. –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É:", reply_markup=deck_keyboard())
    elif text.lower() == "–∏—Å—Ç–æ—Ä–∏—è":
        await user_search_history(message)
    elif text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await user_stat(message)
    elif text.lower() == "–ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    else:
        async with aiohttp.ClientSession() as session:
            film_info = await get_film_info(text, session)
            if film_info:
                await DATABASE.append(message.from_user.username, film_info['title'])
                links = await get_watch_links(film_info['title'], session)
                response_text = (
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {film_info['title']}\n"
                    f"–†–µ–π—Ç–∏–Ω–≥: {film_info['rating']}\n"
                    f"–ü–æ—Å—Ç–µ—Ä: {film_info['poster']}"
                )
                if links:
                    response_text += f"\n–°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n{chr(10).join(links)}"
                else:
                    response_text += "\n–°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await message.reply(response_text)
            else:
                await message.reply("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


@dp.callback_query(lambda callback: callback.data and callback.data.startswith("deck:"))
async def process_deck(callback: types.CallbackQuery):
    data = callback.data.split("deck:")[1]
    deck_names = {
        "nil": "–ù–∏–ª—å—Ñ–≥–∞—Ä–¥ ‚öîÔ∏è",
        "ch": "–ß—É–¥–æ–≤–∏—â–∞ üëπ",
        "ks": "–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –°–µ–≤–µ—Ä–∞ ‚ùÑÔ∏è",
        "s": "–°–∫–æ—è‚Äô—Ç–∞—ç–ª–∏ üî•"
    }
    comments = {
        "nil": "–°–ø–æ—Ä—é —Ç—ã –Ω–µ –∏–∑ —Ç–µ—Ö –∫—Ç–æ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –Ω–∞ –Ω–∏—á—å—é",
        "ch": "–í–µ–¥—å–º–∞–∫ –∏ –ß—É–¥–æ–≤–∏—â–∞? –•–º. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...",
        "ks": "–ê, –ø–æ–Ω–∏–º–∞—é. –ü–∞—Ç—Ä–∏–æ—Ç",
        "s": "–°–∫–æ—è‚Äô—Ç–∞—ç–ª–∏ ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä–∏–≤—ã–∫ –º–∏—Ä–∏—Ç—å—Å—è —Å –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é!"
    }

    deck_name = deck_names.get(data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–¥–∞")
    comment = comments.get(data, "")
    response_message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—É \"{deck_name}\"\n{comment}"

    await callback.message.answer(response_message)
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
